#include <ti/vars.h>
#include <stdint.h>
#include <ti/screen.h>
#include <ti/getcsc.h>
#include <ti/getkey.h>
#include <ti/real>
#include <ti/tokens.h>
#include <cstring>
#include <sys/timers.h>

using namespace ti::literals;

static char* tokenize(const char* str) {
    uint8_t length = strlen(str);
    char* tokenized = (char*)malloc(length + 1);

    for (int i = 0; i < length; i++) {
        if (str[i] == '+') tokenized[i] = OS_TOK_ADD;
        else tokenized[i] = str[i];
    }

    return tokenized;
}


/*
 * Print text to the screen at a specific position.
*/
static void printText(const char *text, uint8_t xpos, uint8_t ypos) {
    os_SetCursorPos(ypos, xpos);
    os_PutStrFull(text);
}

/*
 * Shortcut to set a variable to a value.
*/
static void setVar(const char *varName, float value) {
    real_t val = os_FloatToReal(value);
    os_SetRealVar(varName, &val);
}


// find out how many letters it is after A (var - 'A') and then add that to this "\x41\0\0" and return that
// so if var is 'B' then it will return "\x42\0\0"
static char *getVar(char *var) {
    int varNum = var[0] - 'A';
    char *varStr = (char *)malloc(4);
    varStr[0] = '\x41' + varNum;
    varStr[1] = '\0';
    varStr[2] = '\0';
    return varStr;
}

static char *floatToString(float value) {
    char *str = (char *)malloc(50);
    real_t val = os_FloatToReal(value);
    os_RealToStr(str, &val, 0, 0, -1);
    return str;
}

// add all characters between A and Z to the vars string
static char *extractVariables(char *equation) {
    char *variables = (char *)malloc(50);
    for (int i = 0; i < 50; i++) {
        variables[i] = '\0';
    }

    for (int i = 0; i < 50; i++) {
        if (equation[i] == '\0') {
            break;
        }
        if (equation[i] >= 'A' && equation[i] <= 'Z') {
            int len = strlen(variables);
            variables[len] = equation[i];
        }
    }

    // add a null character to the end of the string and re-allocate the memory to the correct size
    variables[strlen(variables)] = '\0';
    variables = (char *)realloc(variables, strlen(variables) + 1);

    return variables;
}


/*
 * Check if the values of the variables satisfy all the equations.
*/
static bool tryEquations(char equations[10][50]) {
    for (int i = 0; i < 10; i++) {
        if (equations[i][0] == '\0') break;


        char *eq = tokenize(equations[i]);
        // printText(eq, 0, 6);

        // char *eq = "A+5";        

        uint16_t length = strlen(eq);
        string_t* str = (string_t*) malloc(sizeof(string_t) + length + 1);
        str->len = length;
        memcpy(str->data, eq, length + 1);

        int res = os_CreateString(OS_VAR_STR4, str); // res = 0
        
        // int ret = os_Eval(eq, sizeof(eq));
        int ret = os_EvalVar(OS_VAR_STR4);
        if (ret != 0) {
            printText("Failed to evaluate ", 0, i + 2);
            // also print out the value of ret
            char *retStr = (char *)malloc(50);
            retStr = floatToString(ret);
            printText(retStr, 20, i + 1);
            delay(1000);
        }

        uint8_t type;
        void *ans;

        ans = os_GetAnsData(&type);
        if (ans != NULL && type == OS_TYPE_REAL) {
            float value = os_RealToFloat((real_t *)ans);

            if (value != 1)
                return false;
        }
    }

    return true;
}

static bool contains(char *str, char c) {
    for (int i = 0; i < 50; i++) {
        if (str[i] == '\0') {
            break;
        }
        if (str[i] == c) {
            return true;
        }
    }
    return false;
}

/*
 * Take in an array of equations and try different values for all the variables until
 * all of the equations are satisfied. Return the values of the variables that satisfy
 * all the equations as a string.
*/
static char *solveEquation(char equations[10][50], float min=-10, float max=10, float step=1) {
    char* vars = (char *)malloc(50);

    // add all the unique characters from the equations to the vars string
    for (int i = 0; i < 10; i++) {
        if (equations[i][0] == '\0') {
            break;
        }

        char* eqVars = extractVariables(equations[i]);
        for (int j = 0; j < 50; j++) {
            if (eqVars[j] == '\0') {
                break;
            }
            if (!contains(vars, eqVars[j])) {
                int len = strlen(vars);
                vars[len] = eqVars[j];
            }
        }
        // os_NewLine();
        // os_PutStrFull(vars);
    }

    // re-allocate the memory to the correct size
    vars[strlen(vars)] = '\0';
    vars = (char *)realloc(vars, strlen(vars));

    // os_NewLine();
    // os_PutStrFull(vars);

    os_ClrHome();

    // ==========================================================================
    // loop through every possible combination of variables and check if they satisfy the equations

    float values[strlen(vars)];
    for (int i = 0; i < strlen(vars); i++)
        values[i] = min;

    while (values[0] <= max) {
        // set the variables to the current values
        for (int i = 0; i < strlen(vars); i++) {
            setVar(getVar(&vars[i]), values[i]);
        }

        // check if the current values satisfy all the equations
        if (tryEquations(equations)) {
            char *solution = (char *)malloc(50);

            for (int i = 0; i < strlen(vars); i++) {
                char *var = getVar(&vars[i]);
                float value = values[i];
                char *valueStr = (char *)malloc(50);

                // convert the float to a string
                valueStr = floatToString(value);

                printText(var, 0, i + 1);
                printText(" = ", 2, i + 1);
                printText(valueStr, 5, i + 1);
            }

            return solution;
        } else {
            real_t* val;
            int var = os_GetRealVar(OS_VAR_A, val);
            float v = os_RealToFloat(val);
            printText(floatToString(v), 0, 8);
            delay(150);
        }

        // increment the values
        values[strlen(vars) - 1] += step;
        for (int i = strlen(vars) - 1; i > 0; i--) {
            if (values[i] > max) {
                values[i] = min;
                values[i - 1] += step;
            }
        }
    }


    return "Error";
}

int main(void) {
    os_ClrHomeFull();

    // get equations from the user until they send a blank one, store them in a 2d array
    char equations[10][50];

    os_ClrHome();

    uint8_t equationCount = 0;
    while (equationCount < 10) {
        os_GetStringInput("Equation? ", equations[equationCount], 50);
        // os_GetTokenInput("Equation? ", equations[equationCount], 50);
        if (equations[equationCount][0] == '\0') {
            break;
        }
        equationCount++;
        os_NewLine();
    }

    // set the rest of the equations to null
    for (int i = equationCount; i < 10; i++) {
        equations[i][0] = '\0';
    }

    os_ClrHome();
    printText("Solving...", 0, 0);
    os_NewLine();
    for (int i = 0; i < equationCount; i++) {
        printText(equations[i], 0, i + 1);
    }

    delay(1000);

    char *solution = solveEquation(equations);
    os_PutStrFull(solution);

    while (!os_GetCSC()); // wait for a key press
    return 0;
}